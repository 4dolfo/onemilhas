<?php

namespace Model\mms_gestao\__CG__;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Cards extends \Cards implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Cards' . "\0" . 'id', '' . "\0" . 'Cards' . "\0" . 'cardNumber', '' . "\0" . 'Cards' . "\0" . 'accessPassword', '' . "\0" . 'Cards' . "\0" . 'accessId', '' . "\0" . 'Cards' . "\0" . 'recoveryPassword', '' . "\0" . 'Cards' . "\0" . 'blocked', '' . "\0" . 'Cards' . "\0" . 'cardType', '' . "\0" . 'Cards' . "\0" . 'token', '' . "\0" . 'Cards' . "\0" . 'isPriority', '' . "\0" . 'Cards' . "\0" . 'userSession', '' . "\0" . 'Cards' . "\0" . 'daysPriority', '' . "\0" . 'Cards' . "\0" . 'airline', '' . "\0" . 'Cards' . "\0" . 'businesspartner', '' . "\0" . 'Cards' . "\0" . 'cardTax', '' . "\0" . 'Cards' . "\0" . 'sales', '' . "\0" . 'Cards' . "\0" . 'notes', '' . "\0" . 'Cards' . "\0" . 'peopleUsedByTheCard', '' . "\0" . 'Cards' . "\0" . 'maxPerPax', '' . "\0" . 'Cards' . "\0" . 'minimumMiles', '' . "\0" . 'Cards' . "\0" . 'onlyInter', '' . "\0" . 'Cards' . "\0" . 'maxDiamondPax', '' . "\0" . 'Cards' . "\0" . 'userSessionDate'];
        }

        return ['__isInitialized__', '' . "\0" . 'Cards' . "\0" . 'id', '' . "\0" . 'Cards' . "\0" . 'cardNumber', '' . "\0" . 'Cards' . "\0" . 'accessPassword', '' . "\0" . 'Cards' . "\0" . 'accessId', '' . "\0" . 'Cards' . "\0" . 'recoveryPassword', '' . "\0" . 'Cards' . "\0" . 'blocked', '' . "\0" . 'Cards' . "\0" . 'cardType', '' . "\0" . 'Cards' . "\0" . 'token', '' . "\0" . 'Cards' . "\0" . 'isPriority', '' . "\0" . 'Cards' . "\0" . 'userSession', '' . "\0" . 'Cards' . "\0" . 'daysPriority', '' . "\0" . 'Cards' . "\0" . 'airline', '' . "\0" . 'Cards' . "\0" . 'businesspartner', '' . "\0" . 'Cards' . "\0" . 'cardTax', '' . "\0" . 'Cards' . "\0" . 'sales', '' . "\0" . 'Cards' . "\0" . 'notes', '' . "\0" . 'Cards' . "\0" . 'peopleUsedByTheCard', '' . "\0" . 'Cards' . "\0" . 'maxPerPax', '' . "\0" . 'Cards' . "\0" . 'minimumMiles', '' . "\0" . 'Cards' . "\0" . 'onlyInter', '' . "\0" . 'Cards' . "\0" . 'maxDiamondPax', '' . "\0" . 'Cards' . "\0" . 'userSessionDate'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Cards $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getSales()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSales', []);

        return parent::getSales();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCardNumber($cardNumber)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCardNumber', [$cardNumber]);

        return parent::setCardNumber($cardNumber);
    }

    /**
     * {@inheritDoc}
     */
    public function getCardNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCardNumber', []);

        return parent::getCardNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccessPassword($accessPassword)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccessPassword', [$accessPassword]);

        return parent::setAccessPassword($accessPassword);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccessPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccessPassword', []);

        return parent::getAccessPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccessId($accessId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccessId', [$accessId]);

        return parent::setAccessId($accessId);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccessId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccessId', []);

        return parent::getAccessId();
    }

    /**
     * {@inheritDoc}
     */
    public function setRecoveryPassword($recoveryPassword)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRecoveryPassword', [$recoveryPassword]);

        return parent::setRecoveryPassword($recoveryPassword);
    }

    /**
     * {@inheritDoc}
     */
    public function getRecoveryPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRecoveryPassword', []);

        return parent::getRecoveryPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlocked($blocked)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlocked', [$blocked]);

        return parent::setBlocked($blocked);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlocked()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlocked', []);

        return parent::getBlocked();
    }

    /**
     * {@inheritDoc}
     */
    public function setCardType($cardType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCardType', [$cardType]);

        return parent::setCardType($cardType);
    }

    /**
     * {@inheritDoc}
     */
    public function getCardType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCardType', []);

        return parent::getCardType();
    }

    /**
     * {@inheritDoc}
     */
    public function setToken($token)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToken', [$token]);

        return parent::setToken($token);
    }

    /**
     * {@inheritDoc}
     */
    public function getToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToken', []);

        return parent::getToken();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsPriority($isPriority)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsPriority', [$isPriority]);

        return parent::setIsPriority($isPriority);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsPriority()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsPriority', []);

        return parent::getIsPriority();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserSession($userSession)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserSession', [$userSession]);

        return parent::setUserSession($userSession);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserSession()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserSession', []);

        return parent::getUserSession();
    }

    /**
     * {@inheritDoc}
     */
    public function setDaysPriority($daysPriority)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDaysPriority', [$daysPriority]);

        return parent::setDaysPriority($daysPriority);
    }

    /**
     * {@inheritDoc}
     */
    public function getDaysPriority()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDaysPriority', []);

        return parent::getDaysPriority();
    }

    /**
     * {@inheritDoc}
     */
    public function setAirline(\Airline $airline = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAirline', [$airline]);

        return parent::setAirline($airline);
    }

    /**
     * {@inheritDoc}
     */
    public function getAirline()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAirline', []);

        return parent::getAirline();
    }

    /**
     * {@inheritDoc}
     */
    public function setBusinesspartner(\Businesspartner $businesspartner = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBusinesspartner', [$businesspartner]);

        return parent::setBusinesspartner($businesspartner);
    }

    /**
     * {@inheritDoc}
     */
    public function getBusinesspartner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBusinesspartner', []);

        return parent::getBusinesspartner();
    }

    /**
     * {@inheritDoc}
     */
    public function setCardTax(\InternalCards $cardTax = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCardTax', [$cardTax]);

        return parent::setCardTax($cardTax);
    }

    /**
     * {@inheritDoc}
     */
    public function getCardTax()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCardTax', []);

        return parent::getCardTax();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotes($notes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotes', [$notes]);

        return parent::setNotes($notes);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotes', []);

        return parent::getNotes();
    }

    /**
     * {@inheritDoc}
     */
    public function setPeopleUsedByTheCard($peopleUsedByTheCard)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPeopleUsedByTheCard', [$peopleUsedByTheCard]);

        return parent::setPeopleUsedByTheCard($peopleUsedByTheCard);
    }

    /**
     * {@inheritDoc}
     */
    public function getPeopleUsedByTheCard()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPeopleUsedByTheCard', []);

        return parent::getPeopleUsedByTheCard();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxPerPax($maxPerPax)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxPerPax', [$maxPerPax]);

        return parent::setMaxPerPax($maxPerPax);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxPerPax()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxPerPax', []);

        return parent::getMaxPerPax();
    }

    /**
     * {@inheritDoc}
     */
    public function setMinimumMiles($minimumMiles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMinimumMiles', [$minimumMiles]);

        return parent::setMinimumMiles($minimumMiles);
    }

    /**
     * {@inheritDoc}
     */
    public function getMinimumMiles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMinimumMiles', []);

        return parent::getMinimumMiles();
    }

    /**
     * {@inheritDoc}
     */
    public function setOnlyInter($onlyInter)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOnlyInter', [$onlyInter]);

        return parent::setOnlyInter($onlyInter);
    }

    /**
     * {@inheritDoc}
     */
    public function getOnlyInter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOnlyInter', []);

        return parent::getOnlyInter();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxDiamondPax($maxDiamondPax)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxDiamondPax', [$maxDiamondPax]);

        return parent::setMaxDiamondPax($maxDiamondPax);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxDiamondPax()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxDiamondPax', []);

        return parent::getMaxDiamondPax();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserSessionDate($userSessionDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserSessionDate', [$userSessionDate]);

        return parent::setUserSessionDate($userSessionDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserSessionDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserSessionDate', []);

        return parent::getUserSessionDate();
    }

}
